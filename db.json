{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"06dfc04a211445c230f76c7906d745a067e19f21","modified":1686320937803},{"_id":"source/_data/friends.json","hash":"93061f196a60daf05aeb287a0fda7d399c5ccb67","modified":1686320912163},{"_id":"source/_posts/TypeScript 高级类型.md","hash":"15a2cea7622187332e4dd6264ba2d17822a7b52c","modified":1686990901341},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1686320367923},{"_id":"source/about/index.md","hash":"7aa4f43e099f1f696d33eda1800bd904a0880e70","modified":1686320809031},{"_id":"source/categories/index.md","hash":"72f82c8b7c4902c5b2e0c01180b3a8d362574500","modified":1686320781855},{"_id":"source/friends/index.md","hash":"069ff02e5838cf5303e8904b7f78d7534d141c92","modified":1686320856270},{"_id":"source/tags/index.md","hash":"d58305425a1946b6d0b5c1a521ac097ba1207949","modified":1686320796088},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"0e1775353a489f04fea9f6729c9acdf3b58b1c09","modified":1688486810862},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"e326976e1e2cb6accb2dd3b8f2e1e80e5c52cb9e","modified":1681892977615},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/search.xml","hash":"b63c885a2ef75e753277a5545205e789dc16f52f","modified":1686991082434},{"_id":"public/404.html","hash":"7a526957a506e50fdfcfaefc470ed5f9e8459978","modified":1686991082434},{"_id":"public/about/index.html","hash":"8ff3018cef70a3816737d153bcac8fcfb2b6deeb","modified":1686991082434},{"_id":"public/friends/index.html","hash":"d0ef48b0eb2d1a5c5fbf029200015b03f248fc5e","modified":1686991082434},{"_id":"public/categories/index.html","hash":"e472418ee922a63a0e30ab78b9862d200a1bb9f4","modified":1686991082434},{"_id":"public/tags/index.html","hash":"6007ae979e169287866f3fd10bdf9cab8721aabe","modified":1686991082434},{"_id":"public/2023/06/14/typescript-gao-ji-lei-xing/index.html","hash":"539bde6aa910b91fa4d5d69456b7921b5408fa1d","modified":1686991082434},{"_id":"public/2023/06/09/hello-world/index.html","hash":"8ee2262d1e794f069fdb92a8a0d389131a34e772","modified":1686991082434},{"_id":"public/archives/index.html","hash":"c46897d98ce81376daaf168ba0591c57fdb10d39","modified":1686991082434},{"_id":"public/archives/2023/index.html","hash":"787c9814ef1b808d0d9f8f82bcbfcdd57974763b","modified":1686991082434},{"_id":"public/archives/2023/06/index.html","hash":"2fdacc93c385f0b9ae517a07138cc060f1647b3a","modified":1686991082434},{"_id":"public/categories/TypeScript/index.html","hash":"e1d5cc46d9a37ea4dfa2c172d1ccf829deff2f14","modified":1686991082434},{"_id":"public/index.html","hash":"f4be057bbd83a215f46808e5b787cdb1cc199be7","modified":1686991082434},{"_id":"public/tags/TypeScript/index.html","hash":"b4bd2de601230e0beec15f051d66c85d0fc9316a","modified":1686991082434},{"_id":"public/tags/类型操作/index.html","hash":"b18e71b713966de942b9f3c77d959402ca0cc482","modified":1686991082434},{"_id":"public/medias/avatar.jpg","hash":"e326976e1e2cb6accb2dd3b8f2e1e80e5c52cb9e","modified":1686991082434},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1686991082434},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1686991082434},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1686991082434},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1686991082434},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1686991082434},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1686991082434},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1686991082434},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1686991082434},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1686991082434},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1686991082434},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1686991082434},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1686991082434},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1686991082434},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1686991082434},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1686991082434},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1686991082434},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1686991082434},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1686991082434},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1686991082434},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1686991082434},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1686991082434},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1686991082434},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1686991082434},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1686991082434},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1686991082434},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1686991082434},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1686991082434},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1686991082434},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1686991082434},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1686991082434},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1686991082434},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1686991082434},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1686991082434},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1686991082434},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1686991082434},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1686991082434},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1686991082434},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1686991082434},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1686991082434},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1686991082434},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1686991082434},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1686991082434},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1686991082434},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1686991082434},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1686991082434},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1686991082434},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1686991082434},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1686991082434},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1686991082434},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1686991082434},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1686991082434},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1686991082434},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1686991082434},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1686991082434},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1686991082434},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1686991082434},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1686991082434},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1686991082434},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1686991082434},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1686991082434},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1686991082434},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1686991082434},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1686991082434},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1686991082434},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1686991082434},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1686991082434},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1686991082434},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1686991082434},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1686991082434},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1686991082434},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1686991082434},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1686991082434},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1686991082434},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1686991082434},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1686991082434},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1686991082434},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1686991082434},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1686991082434},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1686991082434},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1686991082434},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1686991082434},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1686991082434},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1686991082434},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1686991082434},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1686991082434},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1686991082434},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1686991082434},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1686991082434},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1686991082434},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1686991082434},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1686991082434},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1686991082434},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1686991082434},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1686991082434},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1686991082434},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1686991082434},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1686991082434},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1686991082434},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1686991082434},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1686991082434}],"Category":[{"name":"TypeScript","_id":"clizqxmwl000350v5g8qohynv"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: '404'\nlayout: '404'\ndescription: 'Oops～，我崩溃了！找不到你想要的页面 :('\n---\n","updated":"2023-06-09T14:28:57.803Z","path":"404.html","comments":1,"_id":"clizqxmw8000050v55weu6rk6","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2023-06-09T14:26:42.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-06-09 22:26:42\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2023-06-09T14:26:49.031Z","path":"about/index.html","comments":1,"_id":"clizqxmwk000250v5dhxmf8d0","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2023-06-09T14:27:27.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-06-09 22:27:27\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2023-06-09T14:27:36.270Z","path":"friends/index.html","comments":1,"_id":"clizqxmwn000550v53pl54wkg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2023-06-09T14:26:05.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-06-09 22:26:05\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-06-09T14:26:21.855Z","path":"categories/index.html","comments":1,"_id":"clizqxmwo000650v54xsb9nev","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2023-06-09T14:26:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-06-09 22:26:27\ntype: 'tags'\nlayout: 'tags'\n---\n","updated":"2023-06-09T14:26:36.088Z","path":"tags/index.html","comments":1,"_id":"clizqxmwp000750v5gl0p6800","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"TypeScript 类型操作","author":"Resuragam","top":true,"hide":false,"cover":true,"toc":true,"mathjax":false,"date":"2023-06-14T15:00:15.000Z","summary":"总结 TypeScript 常用的类型操作，例如：keyof、typeof、索引类型等。","_content":"\n## 前言\n\n最近在学习 TypeScript 的时候，发现一个特别有意思的项目[type-challenges](https://github.com/type-challenges/type-challenges)。信心满满的我结果只会做第一个题，下定决心开始恶补一下 TypeScript 的相关知识，因此本文将介绍 TypeScript 一些常见的类型操作，方便后续学习。\n\n> 本文将主要介绍 TypeScript 一些基本关键词的特性，帮助我们熟悉 TypeScript 的类型操作。如果你想获得更多关于 TypeScript 的相关知识，也请不要忘记 [官方文档](https://www.typescriptlang.org/)。\n\n## Typescript 类型操作\n\nTypescript 的类型系统十分强大，因为它允许通过类型去定义生成其他类型。TypeScript 向我们提供了各种各样的类型运算符去使用，从而生成新的类型。通过类型操作符，我们可以使用简洁的操作来表达复杂的类型与值。\n\n### keyof\n\n`keyof` 可以获得任意对象类型的键，并且返回根据键生成的字符串或者数字的组成**联合类型**：\n\n```ts\ntype Point = {\n    x: number;\n    y: number;\n};\ntype P = keyof Point;\n// P 与 type P = \"x\" | \"y\" 等价\n```\n\n如果该类型存在 `string` 或者 `number` 类型的键，那么 `keyof` 会将其返回：\n\n```ts\ntype ArrayIs = {\n    [N: number]: unknown;\n};\ntype A = keyof ArrayIs;\n// type A = number\n\ntype MapIs = {\n    [K: string]: unknown;\n};\ntype M = keyof MapIs;\n// type M = string | number\n```\n\n> `M` 是 `string | number` 是**因为 JavaScript 的键总是会转化为一个 `string`** ,因此 `obj[0]` 和 `obj[\"0\"]` 是相等的。\n\n```ts\nclass EG {\n    private name: string;\n    public age: number;\n}\ntype TEG = keyof EG;\n// type TEG = 'age'\n```\n\n> `keyof` 只能查询该类型上的**公有属性**的 `key` 的联合。\n\n### typeof\n\n`typeof` 可以帮助你获取引用变量或者属性的类型\n\n```ts\nlet str = 'hello';\nlet n: typeof str;\n// let n: string\n```\n\n`typeof` 对基本类型的帮助不是很大，但是可以结合 `typeof` 获取生成其他类型模式，例如生成一个 `ReturnType` 类型：\n\n```ts\ntype Predicate = (x: unknown) => boolean;\ntype K = ReturnType<Predicate>;\n// type K = boolean\n```\n\n`ReturnType` 内置类型可以帮助我们返回一个函数类型的结果类型，但是如果我们不知道一个函数的具体类型时，可以借助 `typeof` 得到其类型。\n\n```ts\nfunction f() {\n    return {\n        x: 10,\n        y: 10,\n    };\n}\ntype P = ReturnType<typeof f>;\n// type P = {\n//     x: number;\n//     y: number;\n// }\n```\n\n如果不是 `typeof` 的话，会产生 `'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?` 的错误提示。\n\n> TypeScript 对于 `typeof` 的使用做出了严格的限制，只有作用与变量名和属性上才是合法的，从而减少语法错误。\n\n### 索引类型\n\n我们可以通过索引类型来获取某一个特定属性的类型。\n\n例如：\n\n```ts\ntype Person = {\n    name: string;\n    age: number;\n};\ntype Age = Person['age'];\n// type Age = number\n```\n\n注意上述 `'age'` 表示一个字面量类型，而索引类型接受的参数本身就是一个类型，因此我们可以使用联合类型，`keyof` ，等关键词来表示该类型。\n\n```ts\ntype T1Person = Person['age' | 'name'];\n\ntype T2Person = Person[keyof Person];\n\ntype PersonKey = 'age' | 'name';\ntype T3Person = Person[PersonKey];\n```\n\n上述的类型都表示 `string | number`，因为传入的类型参数中，存在属性匹配。\n\n如果索引一个不存在的属性，会产生 `Property 'alve' does not exist on type 'Person'.` 的错误。\n\n```ts\ntype ErrorPerson = Person['son'];\n```\n\n除此之外，索引类型最重要的使用就是在数组元素中，通过 `number` 类型来获取数组元素的类型。我们通常会将 `typeof` 联合使用：\n\n```ts\nconst MyArray = [\n    { name: 'Alice', age: 15 },\n    { name: 'Bob', age: 23 },\n    { name: 'Eve', age: 38 },\n];\n\ntype MyArrayT = (typeof MyArray)[number];\n// type MyArrayT = {\n//     name: string;\n//     age: number;\n// }\n\ntype Age1 = (typeof MyArray)[number]['age'];\n// type Age = number\n```\n\n> 需要牢记的是，**索引类型传入的是一个类型参数，而不是具体的值**，否则会产生错误提示。`Type T cannot be used as an index type.T refers to a value, but is being used as a type here. Did you mean 'typeof T'?`\n\n### 条件类型\n\n条件类型可以帮助我们对类型的输入进行判断，从而输出合适的类型。\n\n```ts\ntype num = 1;\ntype str = 'hello world';\n\ntype isNumber<T> = T extends number ? 'yes' : 'no';\n\ntype resultTrue = isNumber<num>;\n// type resultTrue = \"yes\"\ntype resultFalse = isNumber<str>;\n// type resultTrue = \"yes\"\n```\n\n条件类型类似于 JavaScript 当中的 `condition ? trueExpression : falseExpression` 三元运算符表达式。\n\n我们可以通过 `extends` 关键词判断左侧类型与右侧类型时，是否可以满足分配条件，若满足，得获得 `true` 分支的类型，否则获得 `false` 分支上的类型。\n\n#### 条件类型约束\n\n同时**条件类型判断可以与泛型**一起使用，功能更加强大。\n\n```ts\ntype Message<T extends number | string> = T extends number ? number : string;\nfunction typeMessage<T extends number | string>(message: T): Message<T> {\n    throw 'unimplemented';\n}\nconst a = typeMessage('aaaaa');\n// const a: string\nconst b = typeMessage(1);\n// const b: number\nconst c = typeMessage(Math.random() ? 'hello' : 42);\n// const c: string | number\n```\n\n条件类型也可以帮助我们**缩小类型判断**，使得类型判断更加精确可靠。\n\n```ts\ntype MessageOf<T> = T['message'];\n// Type '\"message\"' cannot be used to index type 'T'.\n```\n\n如上述代码的泛型，我们可以通过条件类型进行约束，帮助泛型 `T` 知道 `message`。\n\n```ts\ntype MessageOf<T extends { message: unknown }> = T['message'];\ninterface Email {\n    message: string;\n}\ntype EmailMessageContent = MessageOf<Email>;\n// type EmailMessageContent = string\n```\n\n我们如果需要对不存在的属性进行判断，可以将 `MessageOf` 修改为 `type MessageOf<T> = T extends { message: unknown } ? T['message'] : never;`\n\n针对`数组`的情况，我们也可以通过条件类型得到数组的元素类型。\n\n```ts\ntype Flatten<T> = T extends any[] ? T[number] : T;\ntype FlattenStr = Flatten<string[]>;\n// type FlattenStr = string\n```\n\n#### 条件类型推断\n\n我们可以通过条件类型进行类型约束，然后通过 `infer` 关键词进行类型推断，这是一种非常常见的操作。例如上述代码中我们可以通过条件类型在 `true` 分支上使用 `infer` 关键词得到具体类型，而不是通过索引提取相关元素。\n\n```ts\ntype FlattenInfer<T> = T extends Array<infer P> ? P : T;\ntype FlattenInferStr = Flatten<Array<string | number>>;\n// type FlattenInferStr = string | number\n```\n\n不得不感概 `infer` 关键词的强大，可以类似与一个类型变量参数，不需要关系内部逻辑的实现而可以直接提取类型。我们也可以通过条件类型和 `infer` 提取一个函数最终的返回结果类型。\n\n```ts\ntype GetReturnType<T> = T extends (...args: unknown[]) => infer R ? R : never;\ntype Num = GetReturnType<() => number>;\n// type Num = number\ntype Str = GetReturnType<(x: string) => string>;\n// type Str = string\ntype Bools = GetReturnType<(a: boolean, b: boolean) => boolean[]>;\n// type Bools = boolean[]\n```\n\n#### 分布式条件类型\n\n当条件类型作用于一个泛型类型，并且泛型类型是一个联合类型时，会进行分布式判断。\n\n```ts\ntype ToArray<T> = T extends any ? T[] : never;\ntype StrArrOrNumArr = ToArray<string | number>;\n// type StrArrOrNumArr = string[] | number[];\n```\n\n在执行联合类型的时候，我们会进行分配律进行判断，如果想要阻止这种行为，我们可以通过 `[]` 把 `extend` 一侧的所有关键词括起来。\n\n```ts\ntype ToArrayNonDist<T> = [T] extends [any] ? T[] : never;\ntype StrArrOrNumArrNonDis = ToArrayNonDist<string | number>;\n// type StrArrOrNumArrNonDis = (string | number)[]\n```\n\n### 映射类型\n\n映射类型是基于索引类型的语法基础上的类型，用于声明没有提前声明的属性类型。\n\n```ts\ntype OnlyBoolsAndHorses = {\n    [key: string]: boolean;\n};\n\nconst conforms: OnlyBoolsAndHorses = {\n    del: true,\n    rondeny: false,\n};\n```\n\n映射类型是一种通用类型，使用 `PropertyKey` (通常使用 `keyof` 创建) 的联合来遍历键以创建类型。\n如下面的代码示例， `OptionsFlags` 将 `Features` 类型的所有属性都变成 `boolean` 类型\n\n```ts\ntype OptionsFlags<Type> = {\n    [Property in keyof Type]: boolean;\n};\ntype Features = {\n    darkMode: () => void;\n    newUserProfile: () => void;\n};\ntype FeaturesOptions = OptionsFlags<Features>;\n// type FeaturesOptions = {\n//     darkMode: boolean;\n//     newUserProfile: boolean;\n// }\n```\n\n#### 映射修饰符\n\n映射期间可以通过应用**两个额外的修饰符：`readonly` 和 `?` 来分别影响可变性和可读性**。\n同时也可以**添加 `-` 和 `+` 来删除和添加这些修饰符**，默认为添加。\n\n```ts\ntype CreateMutable<Type> = {\n    -readonly [Property in keyof Type]: boolean;\n};\ntype LockedAccount = {\n    readonly id: string;\n    readonly name: string;\n};\n\ntype UnlockedAccount = CreateMutable<LockedAccount>;\n// type UnlockedAccount = {\n//     id: boolean;\n//     name: boolean;\n// }\n```\n\n```ts\ntype Concrete<Type> = {\n    [Property in keyof Type]-?: Type[Property];\n};\n\ntype MaybeUser = {\n    id: string;\n    name?: string;\n    age?: number;\n};\n\ntype User = Concrete<MaybeUser>;\n// type User = {\n//     id: string;\n//     name: string;\n//     age: number;\n// }\n```\n\n#### 键重映射\n\n键重映射可以通过 `as` 关键词取别名，同时也可以利用模板自变量的方式从先前的属性名称中创建新的属性名称。\n\n```ts\ntype Getters<Type> = {\n    [Property in keyof Type as `get${Capitalize<string & Property>}`]: () => Type[Property];\n};\ninterface PersonMap {\n    name: string;\n    age: number;\n}\ntype GettersPersonMap = Getters<PersonMap>;\n// type GettersPersonMap = {\n//     getName: () => string;\n//     getAge: () => number;\n// }\n```\n\n也可以通过条件类型来生成 `never` 来过滤掉键。\n\n```ts\ntype RemoveKindFiled<Type> = {\n    [Property in keyof Type as Exclude<Property, 'kind'>]: Type[Property];\n};\ninterface Circle {\n    kind: 'circle';\n    radius: number;\n}\ntype KindlessCircle = RemoveKindFiled<Circle>;\n// type KindlessCircle = {\n//     radius: number;\n// }\n```\n\n映射类型可以联合任意类型，而不单单只是 `string | number | symbol`。\n\n```ts\ntype EventConfig<Event extends { kind: string }> = {\n    [E in Event as E['kind']]: (event: E) => void;\n};\ntype SquareEvent = { kind: 'square'; x: number; y: number };\ntype CircleEvent = { kind: 'circle'; radius: number };\ntype Config = EventConfig<SquareEvent | CircleEvent>;\n// type Config = {\n//     square: (event: SquareEvent) => void;\n//     circle: (event: CircleEvent) => void;\n// }\n```\n\n### 模板字面量类型\n\n模板字面量类型建立在字符串字面量类型之上，并且可以通过联合类型进行扩展。\n通过类似于 JavaScript 当中的模板字符串语法格式，将类型进行拼接生成新的模板字面量类型。\n\n```ts\ntype World = 'world';\n\ntype Greeting = `hello ${World}`;\n// type Greeting = \"hello world\"\n```\n\n如果是联合类型，新生成的类型是每个字符串可能联合的成员，类似于交叉相乘。\n\n```ts\ntype EmailLocaleIDs = 'welcome_email' | 'email_heading';\ntype FooterLocaleIDs = 'footer_title' | 'footer_sendoff';\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs} _id`;\n// type AllLocaleIDs = \"welcome_email _id\" | \"email_heading _id\" | \"footer_title _id\" | \"footer_sendoff _id\"\n```\n\n#### 内部字符串操作类型\n\n##### `Uppercase<StringType>`\n\n将字符串的每个字符转换为大写版本。\n\n```ts\ntype ShoutyGreeting = Uppercase<'hello world'>;\n// type ShoutyGreeting = \"HELLO WORLD\"\n```\n\n##### `Lowercase<StringType>`\n\n将字符串的每个字符转换为小写版本。\n\n```ts\ntype QuietGreeting = Lowercase<'HELLO WORLD'>;\n// type QuietGreeting = \"hello world\"\n```\n\n##### `Capitalize<StringType>`\n\n将字符串的开头字符转换为大写版本。\n\n```ts\ntype CapitalizeLowercaseGreeting = Capitalize<'hello world'>;\n// type CapitalizeLowercaseGreeting = \"Hello, world\"\n```\n\n##### `Uncapitalize<StringType>`\n\n将字符串的开头字符转换为小写版本。\n\n```ts\ntype UncomfortableGreeting = Uncapitalize<'HELLO WORLD'>;\n// type UncomfortableGreeting = \"hELLO WORLD\"\n```\n\n### 推荐阅读\n\n-   [TypeScript 内置类型](https://www.typescriptlang.org/docs/handbook/2/types-from-types.html)\n","source":"_posts/TypeScript 高级类型.md","raw":"---\ntitle: TypeScript 类型操作\nauthor: Resuragam\ntop: true\nhide: false\ncover: true\ntoc: true\nmathjax: false\ntags:\n    - TypeScript\n    - 类型操作\ndate: 2023-06-14 23:00:15\nsummary: 总结 TypeScript 常用的类型操作，例如：keyof、typeof、索引类型等。\ncategories: TypeScript\n---\n\n## 前言\n\n最近在学习 TypeScript 的时候，发现一个特别有意思的项目[type-challenges](https://github.com/type-challenges/type-challenges)。信心满满的我结果只会做第一个题，下定决心开始恶补一下 TypeScript 的相关知识，因此本文将介绍 TypeScript 一些常见的类型操作，方便后续学习。\n\n> 本文将主要介绍 TypeScript 一些基本关键词的特性，帮助我们熟悉 TypeScript 的类型操作。如果你想获得更多关于 TypeScript 的相关知识，也请不要忘记 [官方文档](https://www.typescriptlang.org/)。\n\n## Typescript 类型操作\n\nTypescript 的类型系统十分强大，因为它允许通过类型去定义生成其他类型。TypeScript 向我们提供了各种各样的类型运算符去使用，从而生成新的类型。通过类型操作符，我们可以使用简洁的操作来表达复杂的类型与值。\n\n### keyof\n\n`keyof` 可以获得任意对象类型的键，并且返回根据键生成的字符串或者数字的组成**联合类型**：\n\n```ts\ntype Point = {\n    x: number;\n    y: number;\n};\ntype P = keyof Point;\n// P 与 type P = \"x\" | \"y\" 等价\n```\n\n如果该类型存在 `string` 或者 `number` 类型的键，那么 `keyof` 会将其返回：\n\n```ts\ntype ArrayIs = {\n    [N: number]: unknown;\n};\ntype A = keyof ArrayIs;\n// type A = number\n\ntype MapIs = {\n    [K: string]: unknown;\n};\ntype M = keyof MapIs;\n// type M = string | number\n```\n\n> `M` 是 `string | number` 是**因为 JavaScript 的键总是会转化为一个 `string`** ,因此 `obj[0]` 和 `obj[\"0\"]` 是相等的。\n\n```ts\nclass EG {\n    private name: string;\n    public age: number;\n}\ntype TEG = keyof EG;\n// type TEG = 'age'\n```\n\n> `keyof` 只能查询该类型上的**公有属性**的 `key` 的联合。\n\n### typeof\n\n`typeof` 可以帮助你获取引用变量或者属性的类型\n\n```ts\nlet str = 'hello';\nlet n: typeof str;\n// let n: string\n```\n\n`typeof` 对基本类型的帮助不是很大，但是可以结合 `typeof` 获取生成其他类型模式，例如生成一个 `ReturnType` 类型：\n\n```ts\ntype Predicate = (x: unknown) => boolean;\ntype K = ReturnType<Predicate>;\n// type K = boolean\n```\n\n`ReturnType` 内置类型可以帮助我们返回一个函数类型的结果类型，但是如果我们不知道一个函数的具体类型时，可以借助 `typeof` 得到其类型。\n\n```ts\nfunction f() {\n    return {\n        x: 10,\n        y: 10,\n    };\n}\ntype P = ReturnType<typeof f>;\n// type P = {\n//     x: number;\n//     y: number;\n// }\n```\n\n如果不是 `typeof` 的话，会产生 `'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?` 的错误提示。\n\n> TypeScript 对于 `typeof` 的使用做出了严格的限制，只有作用与变量名和属性上才是合法的，从而减少语法错误。\n\n### 索引类型\n\n我们可以通过索引类型来获取某一个特定属性的类型。\n\n例如：\n\n```ts\ntype Person = {\n    name: string;\n    age: number;\n};\ntype Age = Person['age'];\n// type Age = number\n```\n\n注意上述 `'age'` 表示一个字面量类型，而索引类型接受的参数本身就是一个类型，因此我们可以使用联合类型，`keyof` ，等关键词来表示该类型。\n\n```ts\ntype T1Person = Person['age' | 'name'];\n\ntype T2Person = Person[keyof Person];\n\ntype PersonKey = 'age' | 'name';\ntype T3Person = Person[PersonKey];\n```\n\n上述的类型都表示 `string | number`，因为传入的类型参数中，存在属性匹配。\n\n如果索引一个不存在的属性，会产生 `Property 'alve' does not exist on type 'Person'.` 的错误。\n\n```ts\ntype ErrorPerson = Person['son'];\n```\n\n除此之外，索引类型最重要的使用就是在数组元素中，通过 `number` 类型来获取数组元素的类型。我们通常会将 `typeof` 联合使用：\n\n```ts\nconst MyArray = [\n    { name: 'Alice', age: 15 },\n    { name: 'Bob', age: 23 },\n    { name: 'Eve', age: 38 },\n];\n\ntype MyArrayT = (typeof MyArray)[number];\n// type MyArrayT = {\n//     name: string;\n//     age: number;\n// }\n\ntype Age1 = (typeof MyArray)[number]['age'];\n// type Age = number\n```\n\n> 需要牢记的是，**索引类型传入的是一个类型参数，而不是具体的值**，否则会产生错误提示。`Type T cannot be used as an index type.T refers to a value, but is being used as a type here. Did you mean 'typeof T'?`\n\n### 条件类型\n\n条件类型可以帮助我们对类型的输入进行判断，从而输出合适的类型。\n\n```ts\ntype num = 1;\ntype str = 'hello world';\n\ntype isNumber<T> = T extends number ? 'yes' : 'no';\n\ntype resultTrue = isNumber<num>;\n// type resultTrue = \"yes\"\ntype resultFalse = isNumber<str>;\n// type resultTrue = \"yes\"\n```\n\n条件类型类似于 JavaScript 当中的 `condition ? trueExpression : falseExpression` 三元运算符表达式。\n\n我们可以通过 `extends` 关键词判断左侧类型与右侧类型时，是否可以满足分配条件，若满足，得获得 `true` 分支的类型，否则获得 `false` 分支上的类型。\n\n#### 条件类型约束\n\n同时**条件类型判断可以与泛型**一起使用，功能更加强大。\n\n```ts\ntype Message<T extends number | string> = T extends number ? number : string;\nfunction typeMessage<T extends number | string>(message: T): Message<T> {\n    throw 'unimplemented';\n}\nconst a = typeMessage('aaaaa');\n// const a: string\nconst b = typeMessage(1);\n// const b: number\nconst c = typeMessage(Math.random() ? 'hello' : 42);\n// const c: string | number\n```\n\n条件类型也可以帮助我们**缩小类型判断**，使得类型判断更加精确可靠。\n\n```ts\ntype MessageOf<T> = T['message'];\n// Type '\"message\"' cannot be used to index type 'T'.\n```\n\n如上述代码的泛型，我们可以通过条件类型进行约束，帮助泛型 `T` 知道 `message`。\n\n```ts\ntype MessageOf<T extends { message: unknown }> = T['message'];\ninterface Email {\n    message: string;\n}\ntype EmailMessageContent = MessageOf<Email>;\n// type EmailMessageContent = string\n```\n\n我们如果需要对不存在的属性进行判断，可以将 `MessageOf` 修改为 `type MessageOf<T> = T extends { message: unknown } ? T['message'] : never;`\n\n针对`数组`的情况，我们也可以通过条件类型得到数组的元素类型。\n\n```ts\ntype Flatten<T> = T extends any[] ? T[number] : T;\ntype FlattenStr = Flatten<string[]>;\n// type FlattenStr = string\n```\n\n#### 条件类型推断\n\n我们可以通过条件类型进行类型约束，然后通过 `infer` 关键词进行类型推断，这是一种非常常见的操作。例如上述代码中我们可以通过条件类型在 `true` 分支上使用 `infer` 关键词得到具体类型，而不是通过索引提取相关元素。\n\n```ts\ntype FlattenInfer<T> = T extends Array<infer P> ? P : T;\ntype FlattenInferStr = Flatten<Array<string | number>>;\n// type FlattenInferStr = string | number\n```\n\n不得不感概 `infer` 关键词的强大，可以类似与一个类型变量参数，不需要关系内部逻辑的实现而可以直接提取类型。我们也可以通过条件类型和 `infer` 提取一个函数最终的返回结果类型。\n\n```ts\ntype GetReturnType<T> = T extends (...args: unknown[]) => infer R ? R : never;\ntype Num = GetReturnType<() => number>;\n// type Num = number\ntype Str = GetReturnType<(x: string) => string>;\n// type Str = string\ntype Bools = GetReturnType<(a: boolean, b: boolean) => boolean[]>;\n// type Bools = boolean[]\n```\n\n#### 分布式条件类型\n\n当条件类型作用于一个泛型类型，并且泛型类型是一个联合类型时，会进行分布式判断。\n\n```ts\ntype ToArray<T> = T extends any ? T[] : never;\ntype StrArrOrNumArr = ToArray<string | number>;\n// type StrArrOrNumArr = string[] | number[];\n```\n\n在执行联合类型的时候，我们会进行分配律进行判断，如果想要阻止这种行为，我们可以通过 `[]` 把 `extend` 一侧的所有关键词括起来。\n\n```ts\ntype ToArrayNonDist<T> = [T] extends [any] ? T[] : never;\ntype StrArrOrNumArrNonDis = ToArrayNonDist<string | number>;\n// type StrArrOrNumArrNonDis = (string | number)[]\n```\n\n### 映射类型\n\n映射类型是基于索引类型的语法基础上的类型，用于声明没有提前声明的属性类型。\n\n```ts\ntype OnlyBoolsAndHorses = {\n    [key: string]: boolean;\n};\n\nconst conforms: OnlyBoolsAndHorses = {\n    del: true,\n    rondeny: false,\n};\n```\n\n映射类型是一种通用类型，使用 `PropertyKey` (通常使用 `keyof` 创建) 的联合来遍历键以创建类型。\n如下面的代码示例， `OptionsFlags` 将 `Features` 类型的所有属性都变成 `boolean` 类型\n\n```ts\ntype OptionsFlags<Type> = {\n    [Property in keyof Type]: boolean;\n};\ntype Features = {\n    darkMode: () => void;\n    newUserProfile: () => void;\n};\ntype FeaturesOptions = OptionsFlags<Features>;\n// type FeaturesOptions = {\n//     darkMode: boolean;\n//     newUserProfile: boolean;\n// }\n```\n\n#### 映射修饰符\n\n映射期间可以通过应用**两个额外的修饰符：`readonly` 和 `?` 来分别影响可变性和可读性**。\n同时也可以**添加 `-` 和 `+` 来删除和添加这些修饰符**，默认为添加。\n\n```ts\ntype CreateMutable<Type> = {\n    -readonly [Property in keyof Type]: boolean;\n};\ntype LockedAccount = {\n    readonly id: string;\n    readonly name: string;\n};\n\ntype UnlockedAccount = CreateMutable<LockedAccount>;\n// type UnlockedAccount = {\n//     id: boolean;\n//     name: boolean;\n// }\n```\n\n```ts\ntype Concrete<Type> = {\n    [Property in keyof Type]-?: Type[Property];\n};\n\ntype MaybeUser = {\n    id: string;\n    name?: string;\n    age?: number;\n};\n\ntype User = Concrete<MaybeUser>;\n// type User = {\n//     id: string;\n//     name: string;\n//     age: number;\n// }\n```\n\n#### 键重映射\n\n键重映射可以通过 `as` 关键词取别名，同时也可以利用模板自变量的方式从先前的属性名称中创建新的属性名称。\n\n```ts\ntype Getters<Type> = {\n    [Property in keyof Type as `get${Capitalize<string & Property>}`]: () => Type[Property];\n};\ninterface PersonMap {\n    name: string;\n    age: number;\n}\ntype GettersPersonMap = Getters<PersonMap>;\n// type GettersPersonMap = {\n//     getName: () => string;\n//     getAge: () => number;\n// }\n```\n\n也可以通过条件类型来生成 `never` 来过滤掉键。\n\n```ts\ntype RemoveKindFiled<Type> = {\n    [Property in keyof Type as Exclude<Property, 'kind'>]: Type[Property];\n};\ninterface Circle {\n    kind: 'circle';\n    radius: number;\n}\ntype KindlessCircle = RemoveKindFiled<Circle>;\n// type KindlessCircle = {\n//     radius: number;\n// }\n```\n\n映射类型可以联合任意类型，而不单单只是 `string | number | symbol`。\n\n```ts\ntype EventConfig<Event extends { kind: string }> = {\n    [E in Event as E['kind']]: (event: E) => void;\n};\ntype SquareEvent = { kind: 'square'; x: number; y: number };\ntype CircleEvent = { kind: 'circle'; radius: number };\ntype Config = EventConfig<SquareEvent | CircleEvent>;\n// type Config = {\n//     square: (event: SquareEvent) => void;\n//     circle: (event: CircleEvent) => void;\n// }\n```\n\n### 模板字面量类型\n\n模板字面量类型建立在字符串字面量类型之上，并且可以通过联合类型进行扩展。\n通过类似于 JavaScript 当中的模板字符串语法格式，将类型进行拼接生成新的模板字面量类型。\n\n```ts\ntype World = 'world';\n\ntype Greeting = `hello ${World}`;\n// type Greeting = \"hello world\"\n```\n\n如果是联合类型，新生成的类型是每个字符串可能联合的成员，类似于交叉相乘。\n\n```ts\ntype EmailLocaleIDs = 'welcome_email' | 'email_heading';\ntype FooterLocaleIDs = 'footer_title' | 'footer_sendoff';\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs} _id`;\n// type AllLocaleIDs = \"welcome_email _id\" | \"email_heading _id\" | \"footer_title _id\" | \"footer_sendoff _id\"\n```\n\n#### 内部字符串操作类型\n\n##### `Uppercase<StringType>`\n\n将字符串的每个字符转换为大写版本。\n\n```ts\ntype ShoutyGreeting = Uppercase<'hello world'>;\n// type ShoutyGreeting = \"HELLO WORLD\"\n```\n\n##### `Lowercase<StringType>`\n\n将字符串的每个字符转换为小写版本。\n\n```ts\ntype QuietGreeting = Lowercase<'HELLO WORLD'>;\n// type QuietGreeting = \"hello world\"\n```\n\n##### `Capitalize<StringType>`\n\n将字符串的开头字符转换为大写版本。\n\n```ts\ntype CapitalizeLowercaseGreeting = Capitalize<'hello world'>;\n// type CapitalizeLowercaseGreeting = \"Hello, world\"\n```\n\n##### `Uncapitalize<StringType>`\n\n将字符串的开头字符转换为小写版本。\n\n```ts\ntype UncomfortableGreeting = Uncapitalize<'HELLO WORLD'>;\n// type UncomfortableGreeting = \"hELLO WORLD\"\n```\n\n### 推荐阅读\n\n-   [TypeScript 内置类型](https://www.typescriptlang.org/docs/handbook/2/types-from-types.html)\n","slug":"TypeScript 高级类型","published":1,"updated":"2023-06-17T08:35:01.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clizqxmwf000150v5e4gb7lb0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在学习 TypeScript 的时候，发现一个特别有意思的项目<a href=\"https://github.com/type-challenges/type-challenges\">type-challenges</a>。信心满满的我结果只会做第一个题，下定决心开始恶补一下 TypeScript 的相关知识，因此本文将介绍 TypeScript 一些常见的类型操作，方便后续学习。</p>\n<blockquote>\n<p>本文将主要介绍 TypeScript 一些基本关键词的特性，帮助我们熟悉 TypeScript 的类型操作。如果你想获得更多关于 TypeScript 的相关知识，也请不要忘记 <a href=\"https://www.typescriptlang.org/\">官方文档</a>。</p>\n</blockquote>\n<h2 id=\"Typescript-类型操作\"><a href=\"#Typescript-类型操作\" class=\"headerlink\" title=\"Typescript 类型操作\"></a>Typescript 类型操作</h2><p>Typescript 的类型系统十分强大，因为它允许通过类型去定义生成其他类型。TypeScript 向我们提供了各种各样的类型运算符去使用，从而生成新的类型。通过类型操作符，我们可以使用简洁的操作来表达复杂的类型与值。</p>\n<h3 id=\"keyof\"><a href=\"#keyof\" class=\"headerlink\" title=\"keyof\"></a>keyof</h3><p><code>keyof</code> 可以获得任意对象类型的键，并且返回根据键生成的字符串或者数字的组成<strong>联合类型</strong>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Point<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// P 与 type P = \"x\" | \"y\" 等价</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果该类型存在 <code>string</code> 或者 <code>number</code> 类型的键，那么 <code>keyof</code> 会将其返回：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayIs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> ArrayIs<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type A = number</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MapIs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">M</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> MapIs<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type M = string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>M</code> 是 <code>string | number</code> 是<strong>因为 JavaScript 的键总是会转化为一个 <code>string</code></strong> ,因此 <code>obj[0]</code> 和 <code>obj[\"0\"]</code> 是相等的。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">EG</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">TEG</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">EG</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type TEG = 'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>keyof</code> 只能查询该类型上的<strong>公有属性</strong>的 <code>key</code> 的联合。</p>\n</blockquote>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p><code>typeof</code> 可以帮助你获取引用变量或者属性的类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// let n: string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>typeof</code> 对基本类型的帮助不是很大，但是可以结合 <code>typeof</code> 获取生成其他类型模式，例如生成一个 <code>ReturnType</code> 类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Predicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span>Predicate<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type K = boolean</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ReturnType</code> 内置类型可以帮助我们返回一个函数类型的结果类型，但是如果我们不知道一个函数的具体类型时，可以借助 <code>typeof</code> 得到其类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> f<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type P = {</span>\n<span class=\"token comment\">//     x: number;</span>\n<span class=\"token comment\">//     y: number;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不是 <code>typeof</code> 的话，会产生 <code>'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?</code> 的错误提示。</p>\n<blockquote>\n<p>TypeScript 对于 <code>typeof</code> 的使用做出了严格的限制，只有作用与变量名和属性上才是合法的，从而减少语法错误。</p>\n</blockquote>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>我们可以通过索引类型来获取某一个特定属性的类型。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Age = number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意上述 <code>'age'</code> 表示一个字面量类型，而索引类型接受的参数本身就是一个类型，因此我们可以使用联合类型，<code>keyof</code> ，等关键词来表示该类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">T1Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">T2Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonKey</span> <span class=\"token operator\">=</span> <span class=\"token string\">'age'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">T3Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span>PersonKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述的类型都表示 <code>string | number</code>，因为传入的类型参数中，存在属性匹配。</p>\n<p>如果索引一个不存在的属性，会产生 <code>Property 'alve' does not exist on type 'Person'.</code> 的错误。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ErrorPerson</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>除此之外，索引类型最重要的使用就是在数组元素中，通过 <code>number</code> 类型来获取数组元素的类型。我们通常会将 <code>typeof</code> 联合使用：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> MyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Eve'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">38</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyArrayT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type MyArrayT = {</span>\n<span class=\"token comment\">//     name: string;</span>\n<span class=\"token comment\">//     age: number;</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Age = number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>需要牢记的是，<strong>索引类型传入的是一个类型参数，而不是具体的值</strong>，否则会产生错误提示。<code>Type T cannot be used as an index type.T refers to a value, but is being used as a type here. Did you mean 'typeof T'?</code></p>\n</blockquote>\n<h3 id=\"条件类型\"><a href=\"#条件类型\" class=\"headerlink\" title=\"条件类型\"></a>条件类型</h3><p>条件类型可以帮助我们对类型的输入进行判断，从而输出合适的类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">num</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">isNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span> <span class=\"token operator\">?</span> <span class=\"token string\">'yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">resultTrue</span> <span class=\"token operator\">=</span> isNumber<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type resultTrue = \"yes\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">resultFalse</span> <span class=\"token operator\">=</span> isNumber<span class=\"token operator\">&lt;</span>str<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type resultTrue = \"yes\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件类型类似于 JavaScript 当中的 <code>condition ? trueExpression : falseExpression</code> 三元运算符表达式。</p>\n<p>我们可以通过 <code>extends</code> 关键词判断左侧类型与右侧类型时，是否可以满足分配条件，若满足，得获得 <code>true</code> 分支的类型，否则获得 <code>false</code> 分支上的类型。</p>\n<h4 id=\"条件类型约束\"><a href=\"#条件类型约束\" class=\"headerlink\" title=\"条件类型约束\"></a>条件类型约束</h4><p>同时<strong>条件类型判断可以与泛型</strong>一起使用，功能更加强大。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Message<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">typeMessage</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Message<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'unimplemented'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const a: string</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const b: number</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'hello'</span> <span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const c: string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件类型也可以帮助我们<strong>缩小类型判断</strong>，使得类型判断更加精确可靠。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type '\"message\"' cannot be used to index type 'T'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如上述代码的泛型，我们可以通过条件类型进行约束，帮助泛型 <code>T</code> 知道 <code>message</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailMessageContent</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Email<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type EmailMessageContent = string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们如果需要对不存在的属性进行判断，可以将 <code>MessageOf</code> 修改为 <code>type MessageOf&lt;T&gt; = T extends { message: unknown } ? T['message'] : never;</code></p>\n<p>针对<code>数组</code>的情况，我们也可以通过条件类型得到数组的元素类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenStr</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FlattenStr = string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"条件类型推断\"><a href=\"#条件类型推断\" class=\"headerlink\" title=\"条件类型推断\"></a>条件类型推断</h4><p>我们可以通过条件类型进行类型约束，然后通过 <code>infer</code> 关键词进行类型推断，这是一种非常常见的操作。例如上述代码中我们可以通过条件类型在 <code>true</code> 分支上使用 <code>infer</code> 关键词得到具体类型，而不是通过索引提取相关元素。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenInfer<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenInferStr</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FlattenInferStr = string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>不得不感概 <code>infer</code> 关键词的强大，可以类似与一个类型变量参数，不需要关系内部逻辑的实现而可以直接提取类型。我们也可以通过条件类型和 <code>infer</code> 提取一个函数最终的返回结果类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Num = number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Str = string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bools</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Bools = boolean[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"分布式条件类型\"><a href=\"#分布式条件类型\" class=\"headerlink\" title=\"分布式条件类型\"></a>分布式条件类型</h4><p>当条件类型作用于一个泛型类型，并且泛型类型是一个联合类型时，会进行分布式判断。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArr</span> <span class=\"token operator\">=</span> ToArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type StrArrOrNumArr = string[] | number[];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在执行联合类型的时候，我们会进行分配律进行判断，如果想要阻止这种行为，我们可以通过 <code>[]</code> 把 <code>extend</code> 一侧的所有关键词括起来。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArrayNonDist<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArrNonDis</span> <span class=\"token operator\">=</span> ToArrayNonDist<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type StrArrOrNumArrNonDis = (string | number)[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h3><p>映射类型是基于索引类型的语法基础上的类型，用于声明没有提前声明的属性类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OnlyBoolsAndHorses</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> conforms<span class=\"token operator\">:</span> OnlyBoolsAndHorses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    del<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rondeny<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>映射类型是一种通用类型，使用 <code>PropertyKey</code> (通常使用 <code>keyof</code> 创建) 的联合来遍历键以创建类型。<br>如下面的代码示例， <code>OptionsFlags</code> 将 <code>Features</code> 类型的所有属性都变成 <code>boolean</code> 类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsFlags<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Features</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">darkMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">newUserProfile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FeaturesOptions</span> <span class=\"token operator\">=</span> OptionsFlags<span class=\"token operator\">&lt;</span>Features<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FeaturesOptions = {</span>\n<span class=\"token comment\">//     darkMode: boolean;</span>\n<span class=\"token comment\">//     newUserProfile: boolean;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"映射修饰符\"><a href=\"#映射修饰符\" class=\"headerlink\" title=\"映射修饰符\"></a>映射修饰符</h4><p>映射期间可以通过应用<strong>两个额外的修饰符：<code>readonly</code> 和 <code>?</code> 来分别影响可变性和可读性</strong>。<br>同时也可以<strong>添加 <code>-</code> 和 <code>+</code> 来删除和添加这些修饰符</strong>，默认为添加。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CreateMutable<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">-</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LockedAccount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnlockedAccount</span> <span class=\"token operator\">=</span> CreateMutable<span class=\"token operator\">&lt;</span>LockedAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type UnlockedAccount = {</span>\n<span class=\"token comment\">//     id: boolean;</span>\n<span class=\"token comment\">//     name: boolean;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Concrete<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MaybeUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> Concrete<span class=\"token operator\">&lt;</span>MaybeUser<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type User = {</span>\n<span class=\"token comment\">//     id: string;</span>\n<span class=\"token comment\">//     name: string;</span>\n<span class=\"token comment\">//     age: number;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"键重映射\"><a href=\"#键重映射\" class=\"headerlink\" title=\"键重映射\"></a>键重映射</h4><p>键重映射可以通过 <code>as</code> 关键词取别名，同时也可以利用模板自变量的方式从先前的属性名称中创建新的属性名称。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Getters<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">get</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Capitalize<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> Property<span class=\"token operator\">&gt;</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonMap</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GettersPersonMap</span> <span class=\"token operator\">=</span> Getters<span class=\"token operator\">&lt;</span>PersonMap<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type GettersPersonMap = {</span>\n<span class=\"token comment\">//     getName: () =&gt; string;</span>\n<span class=\"token comment\">//     getAge: () =&gt; number;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以通过条件类型来生成 <code>never</code> 来过滤掉键。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RemoveKindFiled<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> Exclude<span class=\"token operator\">&lt;</span>Property<span class=\"token punctuation\">,</span> <span class=\"token string\">'kind'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">'circle'</span><span class=\"token punctuation\">;</span>\n    radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">KindlessCircle</span> <span class=\"token operator\">=</span> RemoveKindFiled<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type KindlessCircle = {</span>\n<span class=\"token comment\">//     radius: number;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>映射类型可以联合任意类型，而不单单只是 <code>string | number | symbol</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EventConfig<span class=\"token operator\">&lt;</span>Event <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">E</span> <span class=\"token keyword\">in</span> Event <span class=\"token keyword\">as</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kind'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SquareEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'square'</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CircleEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'circle'</span><span class=\"token punctuation\">;</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Config</span> <span class=\"token operator\">=</span> EventConfig<span class=\"token operator\">&lt;</span>SquareEvent <span class=\"token operator\">|</span> CircleEvent<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Config = {</span>\n<span class=\"token comment\">//     square: (event: SquareEvent) =&gt; void;</span>\n<span class=\"token comment\">//     circle: (event: CircleEvent) =&gt; void;</span>\n<span class=\"token comment\">// }</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"模板字面量类型\"><a href=\"#模板字面量类型\" class=\"headerlink\" title=\"模板字面量类型\"></a>模板字面量类型</h3><p>模板字面量类型建立在字符串字面量类型之上，并且可以通过联合类型进行扩展。<br>通过类似于 JavaScript 当中的模板字符串语法格式，将类型进行拼接生成新的模板字面量类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">World</span> <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>World<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Greeting = \"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是联合类型，新生成的类型是每个字符串可能联合的成员，类似于交叉相乘。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token string\">'welcome_email'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'email_heading'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FooterLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token string\">'footer_title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'footer_sendoff'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AllLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>EmailLocaleIDs <span class=\"token operator\">|</span> FooterLocaleIDs<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> _id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type AllLocaleIDs = \"welcome_email _id\" | \"email_heading _id\" | \"footer_title _id\" | \"footer_sendoff _id\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"内部字符串操作类型\"><a href=\"#内部字符串操作类型\" class=\"headerlink\" title=\"内部字符串操作类型\"></a>内部字符串操作类型</h4><h5 id=\"Uppercase-lt-StringType-gt\"><a href=\"#Uppercase-lt-StringType-gt\" class=\"headerlink\" title=\"Uppercase<StringType>\"></a><code>Uppercase&lt;StringType&gt;</code></h5><p>将字符串的每个字符转换为大写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ShoutyGreeting</span> <span class=\"token operator\">=</span> Uppercase<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type ShoutyGreeting = \"HELLO WORLD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Lowercase-lt-StringType-gt\"><a href=\"#Lowercase-lt-StringType-gt\" class=\"headerlink\" title=\"Lowercase<StringType>\"></a><code>Lowercase&lt;StringType&gt;</code></h5><p>将字符串的每个字符转换为小写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">QuietGreeting</span> <span class=\"token operator\">=</span> Lowercase<span class=\"token operator\">&lt;</span><span class=\"token string\">'HELLO WORLD'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type QuietGreeting = \"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Capitalize-lt-StringType-gt\"><a href=\"#Capitalize-lt-StringType-gt\" class=\"headerlink\" title=\"Capitalize<StringType>\"></a><code>Capitalize&lt;StringType&gt;</code></h5><p>将字符串的开头字符转换为大写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CapitalizeLowercaseGreeting</span> <span class=\"token operator\">=</span> Capitalize<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type CapitalizeLowercaseGreeting = \"Hello, world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Uncapitalize-lt-StringType-gt\"><a href=\"#Uncapitalize-lt-StringType-gt\" class=\"headerlink\" title=\"Uncapitalize<StringType>\"></a><code>Uncapitalize&lt;StringType&gt;</code></h5><p>将字符串的开头字符转换为小写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UncomfortableGreeting</span> <span class=\"token operator\">=</span> Uncapitalize<span class=\"token operator\">&lt;</span><span class=\"token string\">'HELLO WORLD'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type UncomfortableGreeting = \"hELLO WORLD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h3><ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\">TypeScript 内置类型</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在学习 TypeScript 的时候，发现一个特别有意思的项目<a href=\"https://github.com/type-challenges/type-challenges\">type-challenges</a>。信心满满的我结果只会做第一个题，下定决心开始恶补一下 TypeScript 的相关知识，因此本文将介绍 TypeScript 一些常见的类型操作，方便后续学习。</p>\n<blockquote>\n<p>本文将主要介绍 TypeScript 一些基本关键词的特性，帮助我们熟悉 TypeScript 的类型操作。如果你想获得更多关于 TypeScript 的相关知识，也请不要忘记 <a href=\"https://www.typescriptlang.org/\">官方文档</a>。</p>\n</blockquote>\n<h2 id=\"Typescript-类型操作\"><a href=\"#Typescript-类型操作\" class=\"headerlink\" title=\"Typescript 类型操作\"></a>Typescript 类型操作</h2><p>Typescript 的类型系统十分强大，因为它允许通过类型去定义生成其他类型。TypeScript 向我们提供了各种各样的类型运算符去使用，从而生成新的类型。通过类型操作符，我们可以使用简洁的操作来表达复杂的类型与值。</p>\n<h3 id=\"keyof\"><a href=\"#keyof\" class=\"headerlink\" title=\"keyof\"></a>keyof</h3><p><code>keyof</code> 可以获得任意对象类型的键，并且返回根据键生成的字符串或者数字的组成<strong>联合类型</strong>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Point<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// P 与 type P = \"x\" | \"y\" 等价</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果该类型存在 <code>string</code> 或者 <code>number</code> 类型的键，那么 <code>keyof</code> 会将其返回：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayIs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> ArrayIs<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type A = number</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MapIs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">M</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> MapIs<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type M = string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>M</code> 是 <code>string | number</code> 是<strong>因为 JavaScript 的键总是会转化为一个 <code>string</code></strong> ,因此 <code>obj[0]</code> 和 <code>obj[&quot;0&quot;]</code> 是相等的。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">EG</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">TEG</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">EG</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type TEG = 'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>keyof</code> 只能查询该类型上的<strong>公有属性</strong>的 <code>key</code> 的联合。</p>\n</blockquote>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p><code>typeof</code> 可以帮助你获取引用变量或者属性的类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// let n: string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>typeof</code> 对基本类型的帮助不是很大，但是可以结合 <code>typeof</code> 获取生成其他类型模式，例如生成一个 <code>ReturnType</code> 类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Predicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span>Predicate<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type K = boolean</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ReturnType</code> 内置类型可以帮助我们返回一个函数类型的结果类型，但是如果我们不知道一个函数的具体类型时，可以借助 <code>typeof</code> 得到其类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> f<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type P = &#123;</span>\n<span class=\"token comment\">//     x: number;</span>\n<span class=\"token comment\">//     y: number;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不是 <code>typeof</code> 的话，会产生 <code>&#39;f&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof f&#39;?</code> 的错误提示。</p>\n<blockquote>\n<p>TypeScript 对于 <code>typeof</code> 的使用做出了严格的限制，只有作用与变量名和属性上才是合法的，从而减少语法错误。</p>\n</blockquote>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>我们可以通过索引类型来获取某一个特定属性的类型。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Age = number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意上述 <code>&#39;age&#39;</code> 表示一个字面量类型，而索引类型接受的参数本身就是一个类型，因此我们可以使用联合类型，<code>keyof</code> ，等关键词来表示该类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">T1Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">T2Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonKey</span> <span class=\"token operator\">=</span> <span class=\"token string\">'age'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">T3Person</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span>PersonKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述的类型都表示 <code>string | number</code>，因为传入的类型参数中，存在属性匹配。</p>\n<p>如果索引一个不存在的属性，会产生 <code>Property &#39;alve&#39; does not exist on type &#39;Person&#39;.</code> 的错误。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ErrorPerson</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>除此之外，索引类型最重要的使用就是在数组元素中，通过 <code>number</code> 类型来获取数组元素的类型。我们通常会将 <code>typeof</code> 联合使用：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> MyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Eve'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">38</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyArrayT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type MyArrayT = &#123;</span>\n<span class=\"token comment\">//     name: string;</span>\n<span class=\"token comment\">//     age: number;</span>\n<span class=\"token comment\">// &#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Age = number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>需要牢记的是，<strong>索引类型传入的是一个类型参数，而不是具体的值</strong>，否则会产生错误提示。<code>Type T cannot be used as an index type.T refers to a value, but is being used as a type here. Did you mean &#39;typeof T&#39;?</code></p>\n</blockquote>\n<h3 id=\"条件类型\"><a href=\"#条件类型\" class=\"headerlink\" title=\"条件类型\"></a>条件类型</h3><p>条件类型可以帮助我们对类型的输入进行判断，从而输出合适的类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">num</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">isNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span> <span class=\"token operator\">?</span> <span class=\"token string\">'yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">resultTrue</span> <span class=\"token operator\">=</span> isNumber<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type resultTrue = \"yes\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">resultFalse</span> <span class=\"token operator\">=</span> isNumber<span class=\"token operator\">&lt;</span>str<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type resultTrue = \"yes\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件类型类似于 JavaScript 当中的 <code>condition ? trueExpression : falseExpression</code> 三元运算符表达式。</p>\n<p>我们可以通过 <code>extends</code> 关键词判断左侧类型与右侧类型时，是否可以满足分配条件，若满足，得获得 <code>true</code> 分支的类型，否则获得 <code>false</code> 分支上的类型。</p>\n<h4 id=\"条件类型约束\"><a href=\"#条件类型约束\" class=\"headerlink\" title=\"条件类型约束\"></a>条件类型约束</h4><p>同时<strong>条件类型判断可以与泛型</strong>一起使用，功能更加强大。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Message<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">typeMessage</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Message<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'unimplemented'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const a: string</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const b: number</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">typeMessage</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'hello'</span> <span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const c: string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件类型也可以帮助我们<strong>缩小类型判断</strong>，使得类型判断更加精确可靠。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type '\"message\"' cannot be used to index type 'T'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如上述代码的泛型，我们可以通过条件类型进行约束，帮助泛型 <code>T</code> 知道 <code>message</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">&#123;</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailMessageContent</span> <span class=\"token operator\">=</span> MessageOf<span class=\"token operator\">&lt;</span>Email<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type EmailMessageContent = string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们如果需要对不存在的属性进行判断，可以将 <code>MessageOf</code> 修改为 <code>type MessageOf&lt;T&gt; = T extends &#123; message: unknown &#125; ? T[&#39;message&#39;] : never;</code></p>\n<p>针对<code>数组</code>的情况，我们也可以通过条件类型得到数组的元素类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenStr</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FlattenStr = string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"条件类型推断\"><a href=\"#条件类型推断\" class=\"headerlink\" title=\"条件类型推断\"></a>条件类型推断</h4><p>我们可以通过条件类型进行类型约束，然后通过 <code>infer</code> 关键词进行类型推断，这是一种非常常见的操作。例如上述代码中我们可以通过条件类型在 <code>true</code> 分支上使用 <code>infer</code> 关键词得到具体类型，而不是通过索引提取相关元素。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenInfer<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FlattenInferStr</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FlattenInferStr = string | number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>不得不感概 <code>infer</code> 关键词的强大，可以类似与一个类型变量参数，不需要关系内部逻辑的实现而可以直接提取类型。我们也可以通过条件类型和 <code>infer</code> 提取一个函数最终的返回结果类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Num</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Num = number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Str</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Str = string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bools</span> <span class=\"token operator\">=</span> GetReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Bools = boolean[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"分布式条件类型\"><a href=\"#分布式条件类型\" class=\"headerlink\" title=\"分布式条件类型\"></a>分布式条件类型</h4><p>当条件类型作用于一个泛型类型，并且泛型类型是一个联合类型时，会进行分布式判断。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArr</span> <span class=\"token operator\">=</span> ToArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type StrArrOrNumArr = string[] | number[];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在执行联合类型的时候，我们会进行分配律进行判断，如果想要阻止这种行为，我们可以通过 <code>[]</code> 把 <code>extend</code> 一侧的所有关键词括起来。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ToArrayNonDist<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrArrOrNumArrNonDis</span> <span class=\"token operator\">=</span> ToArrayNonDist<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type StrArrOrNumArrNonDis = (string | number)[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h3><p>映射类型是基于索引类型的语法基础上的类型，用于声明没有提前声明的属性类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OnlyBoolsAndHorses</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> conforms<span class=\"token operator\">:</span> OnlyBoolsAndHorses <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    del<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rondeny<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>映射类型是一种通用类型，使用 <code>PropertyKey</code> (通常使用 <code>keyof</code> 创建) 的联合来遍历键以创建类型。<br>如下面的代码示例， <code>OptionsFlags</code> 将 <code>Features</code> 类型的所有属性都变成 <code>boolean</code> 类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsFlags<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Features</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">darkMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">newUserProfile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FeaturesOptions</span> <span class=\"token operator\">=</span> OptionsFlags<span class=\"token operator\">&lt;</span>Features<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type FeaturesOptions = &#123;</span>\n<span class=\"token comment\">//     darkMode: boolean;</span>\n<span class=\"token comment\">//     newUserProfile: boolean;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"映射修饰符\"><a href=\"#映射修饰符\" class=\"headerlink\" title=\"映射修饰符\"></a>映射修饰符</h4><p>映射期间可以通过应用<strong>两个额外的修饰符：<code>readonly</code> 和 <code>?</code> 来分别影响可变性和可读性</strong>。<br>同时也可以<strong>添加 <code>-</code> 和 <code>+</code> 来删除和添加这些修饰符</strong>，默认为添加。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CreateMutable<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">-</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LockedAccount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">readonly</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnlockedAccount</span> <span class=\"token operator\">=</span> CreateMutable<span class=\"token operator\">&lt;</span>LockedAccount<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type UnlockedAccount = &#123;</span>\n<span class=\"token comment\">//     id: boolean;</span>\n<span class=\"token comment\">//     name: boolean;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Concrete<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MaybeUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> Concrete<span class=\"token operator\">&lt;</span>MaybeUser<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type User = &#123;</span>\n<span class=\"token comment\">//     id: string;</span>\n<span class=\"token comment\">//     name: string;</span>\n<span class=\"token comment\">//     age: number;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"键重映射\"><a href=\"#键重映射\" class=\"headerlink\" title=\"键重映射\"></a>键重映射</h4><p>键重映射可以通过 <code>as</code> 关键词取别名，同时也可以利用模板自变量的方式从先前的属性名称中创建新的属性名称。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Getters<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">get</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Capitalize<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> Property<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonMap</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GettersPersonMap</span> <span class=\"token operator\">=</span> Getters<span class=\"token operator\">&lt;</span>PersonMap<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type GettersPersonMap = &#123;</span>\n<span class=\"token comment\">//     getName: () => string;</span>\n<span class=\"token comment\">//     getAge: () => number;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以通过条件类型来生成 <code>never</code> 来过滤掉键。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RemoveKindFiled<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> Exclude<span class=\"token operator\">&lt;</span>Property<span class=\"token punctuation\">,</span> <span class=\"token string\">'kind'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">'circle'</span><span class=\"token punctuation\">;</span>\n    radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">KindlessCircle</span> <span class=\"token operator\">=</span> RemoveKindFiled<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type KindlessCircle = &#123;</span>\n<span class=\"token comment\">//     radius: number;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>映射类型可以联合任意类型，而不单单只是 <code>string | number | symbol</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EventConfig<span class=\"token operator\">&lt;</span>Event <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span> kind<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">E</span> <span class=\"token keyword\">in</span> Event <span class=\"token keyword\">as</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kind'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SquareEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'square'</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CircleEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'circle'</span><span class=\"token punctuation\">;</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Config</span> <span class=\"token operator\">=</span> EventConfig<span class=\"token operator\">&lt;</span>SquareEvent <span class=\"token operator\">|</span> CircleEvent<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Config = &#123;</span>\n<span class=\"token comment\">//     square: (event: SquareEvent) => void;</span>\n<span class=\"token comment\">//     circle: (event: CircleEvent) => void;</span>\n<span class=\"token comment\">// &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"模板字面量类型\"><a href=\"#模板字面量类型\" class=\"headerlink\" title=\"模板字面量类型\"></a>模板字面量类型</h3><p>模板字面量类型建立在字符串字面量类型之上，并且可以通过联合类型进行扩展。<br>通过类似于 JavaScript 当中的模板字符串语法格式，将类型进行拼接生成新的模板字面量类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">World</span> <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>World<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type Greeting = \"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是联合类型，新生成的类型是每个字符串可能联合的成员，类似于交叉相乘。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EmailLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token string\">'welcome_email'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'email_heading'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FooterLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token string\">'footer_title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'footer_sendoff'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AllLocaleIDs</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>EmailLocaleIDs <span class=\"token operator\">|</span> FooterLocaleIDs<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> _id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type AllLocaleIDs = \"welcome_email _id\" | \"email_heading _id\" | \"footer_title _id\" | \"footer_sendoff _id\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"内部字符串操作类型\"><a href=\"#内部字符串操作类型\" class=\"headerlink\" title=\"内部字符串操作类型\"></a>内部字符串操作类型</h4><h5 id=\"Uppercase-lt-StringType-gt\"><a href=\"#Uppercase-lt-StringType-gt\" class=\"headerlink\" title=\"Uppercase&lt;StringType&gt;\"></a><code>Uppercase&lt;StringType&gt;</code></h5><p>将字符串的每个字符转换为大写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ShoutyGreeting</span> <span class=\"token operator\">=</span> Uppercase<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type ShoutyGreeting = \"HELLO WORLD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Lowercase-lt-StringType-gt\"><a href=\"#Lowercase-lt-StringType-gt\" class=\"headerlink\" title=\"Lowercase&lt;StringType&gt;\"></a><code>Lowercase&lt;StringType&gt;</code></h5><p>将字符串的每个字符转换为小写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">QuietGreeting</span> <span class=\"token operator\">=</span> Lowercase<span class=\"token operator\">&lt;</span><span class=\"token string\">'HELLO WORLD'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type QuietGreeting = \"hello world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Capitalize-lt-StringType-gt\"><a href=\"#Capitalize-lt-StringType-gt\" class=\"headerlink\" title=\"Capitalize&lt;StringType&gt;\"></a><code>Capitalize&lt;StringType&gt;</code></h5><p>将字符串的开头字符转换为大写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CapitalizeLowercaseGreeting</span> <span class=\"token operator\">=</span> Capitalize<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type CapitalizeLowercaseGreeting = \"Hello, world\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"Uncapitalize-lt-StringType-gt\"><a href=\"#Uncapitalize-lt-StringType-gt\" class=\"headerlink\" title=\"Uncapitalize&lt;StringType&gt;\"></a><code>Uncapitalize&lt;StringType&gt;</code></h5><p>将字符串的开头字符转换为小写版本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UncomfortableGreeting</span> <span class=\"token operator\">=</span> Uncapitalize<span class=\"token operator\">&lt;</span><span class=\"token string\">'HELLO WORLD'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type UncomfortableGreeting = \"hELLO WORLD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h3><ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\">TypeScript 内置类型</a></li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-06-09T14:19:27.923Z","updated":"2023-06-09T14:19:27.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clizqxmwy000c50v5dwga9480","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clizqxmwf000150v5e4gb7lb0","category_id":"clizqxmwl000350v5g8qohynv","_id":"clizqxmwp000950v58jche7pq"}],"PostTag":[{"post_id":"clizqxmwf000150v5e4gb7lb0","tag_id":"clizqxmwn000450v5f57p79ft","_id":"clizqxmwq000a50v51vm4bwzj"},{"post_id":"clizqxmwf000150v5e4gb7lb0","tag_id":"clizqxmwp000850v561d10cms","_id":"clizqxmwq000b50v5085d2ksm"}],"Tag":[{"name":"TypeScript","_id":"clizqxmwn000450v5f57p79ft"},{"name":"类型操作","_id":"clizqxmwp000850v561d10cms"}]}}